# Reusable Terragrunt Deployment Workflow
# This workflow can be called from deployment repositories to execute Terragrunt operations

name: Terragrunt Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment configuration name (e.g., production-usw2)'
        required: true
        type: string
      
      layer:
        description: 'Infrastructure layer to deploy (all, substrate, hosting, application)'
        required: false
        type: string
        default: 'all'
      
      action:
        description: 'Terraform action (plan, apply, destroy)'
        required: false
        type: string
        default: 'plan'
      
      terraform_repo:
        description: 'HoneyHive Terraform repository reference'
        required: false
        type: string
        default: 'honeyhiveai/honeyhive-terraform'
      
      terraform_ref:
        description: 'Git ref (tag/branch/SHA) of honeyhive-terraform to use'
        required: false
        type: string
        default: 'main'
      
      config_path:
        description: 'Path to YAML configuration file in calling repo'
        required: false
        type: string
        default: 'configs'
      
      working_directory:
        description: 'Working directory (defaults to repo root)'
        required: false
        type: string
        default: '.'
      
      terragrunt_version:
        description: 'Terragrunt version'
        required: false
        type: string
        default: '0.55.0'
      
      terraform_version:
        description: 'Terraform version'
        required: false
        type: string
        default: '1.9.0'
      
      aws_region:
        description: 'AWS region'
        required: false
        type: string
        default: 'us-west-2'
      
      aws_oidc_role:
        description: 'AWS IAM role ARN for OIDC (can also use vars.AWS_OIDC_ROLE from calling repo)'
        required: false
        type: string
        default: ''
      
      gh_app_id:
        description: 'GitHub App ID (can also use vars.GH_APP_ID from calling repo)'
        required: false
        type: string
        default: ''
    
    secrets:
      GH_APP_PRIVATE_KEY:
        description: 'GitHub App private key (PEM format)'
        required: true
      TWINGATE_API_TOKEN:
        description: 'Twingate API token (if using Twingate)'
        required: false
      SLACK_TOKEN:
        description: 'Slack token for notifications (if using ArgoCD)'
        required: false

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  terragrunt-deploy:
    name: Terragrunt ${{ inputs.action }} - ${{ inputs.layer }}
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ inputs.environment }}
      url: https://console.aws.amazon.com/
    
    steps:
      - name: Checkout calling repository
        uses: actions/checkout@v5
        with:
          path: config-repo
      
      - name: Generate GitHub App Token
        id: app_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ inputs.gh_app_id || vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          owner: honeyhiveai
          repositories: 'honeyhive-terraform,tf-module-aws-iam,tf-module-aws-vpc,tf-module-aws-secrets-manager,tf-module-helm-argocd,tf-module-helm-karpenter,tf-module-helm-eso'
      
      - name: Extract AWS Account ID from config
        id: extract_config
        run: |
          CONFIG_FILE="config-repo/${{ inputs.config_path }}/${{ inputs.environment }}.yaml"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Configuration file not found: $CONFIG_FILE"
            exit 1
          fi
          
          # Extract account_id from YAML
          ACCOUNT_ID=$(python3 -c "import yaml; config=yaml.safe_load(open('$CONFIG_FILE')); print(config.get('account_id', ''))")
          
          if [ -z "$ACCOUNT_ID" ]; then
            echo "::error::account_id not found in configuration file"
            exit 1
          fi
          
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "✅ Extracted account_id: $ACCOUNT_ID"
      
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ inputs.aws_oidc_role || vars.AWS_OIDC_ROLE }}
          role-session-name: github-actions-${{ github.run_id }}
          aws-region: ${{ inputs.aws_region }}
      
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ inputs.terragrunt_version }}
          token: ${{ steps.app_token.outputs.token }}
      
      - name: Setup Terraform
        uses: autero1/action-terraform@v3
        with:
          terraform-version: ${{ inputs.terraform_version }}
      
      - name: Setup Git credentials for Terraform
        run: |
          git config --global credential.helper store
          echo "https://x-access-token:${{ steps.app_token.outputs.token }}@github.com" > ~/.git-credentials
          echo "✅ Git credentials configured for Terraform/Terragrunt module access"
      
      - name: Set environment variables
        run: |
          CONFIG_FILE="${{ github.workspace }}/config-repo/${{ inputs.config_path }}/${{ inputs.environment }}.yaml"
          
          echo "TENANT_CONFIG_PATH=$CONFIG_FILE" >> $GITHUB_ENV
          echo "TERRAFORM_REPO=${{ inputs.terraform_repo }}" >> $GITHUB_ENV
          echo "TERRAFORM_REF=${{ inputs.terraform_ref }}" >> $GITHUB_ENV
          echo "LAYER=${{ inputs.layer }}" >> $GITHUB_ENV
          echo "ACTION=${{ inputs.action }}" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=${{ steps.extract_config.outputs.account_id }}" >> $GITHUB_ENV
      
      - name: Checkout honeyhive-workflows for graphs
        uses: actions/checkout@v5
        with:
          repository: honeyhiveai/honeyhive-workflows
          ref: ${{ github.ref_name }}  # Use the same branch/tag as the calling workflow
          token: ${{ steps.app_token.outputs.token }}
          path: workflow-repo
      
      - name: DEBUG - Show actual directory structure
        run: |
          echo "## 🔍 Directory Structure Debug" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### GITHUB_WORKSPACE: ${{ github.workspace }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "=== Full workspace structure ===" >> $GITHUB_STEP_SUMMARY
          tree -L 4 -d ${{ github.workspace }} || find ${{ github.workspace }} -maxdepth 4 -type d
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "=== Graph structure ===" >> $GITHUB_STEP_SUMMARY
          ls -la ${{ github.workspace }}/workflow-repo/graphs/aws/full/
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "=== Substrate layer ===" >> $GITHUB_STEP_SUMMARY
          ls -la ${{ github.workspace }}/workflow-repo/graphs/aws/full/substrate/
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Terragrunt Init
        run: |
          # Set up working directory in the graphs
          cd ${{ github.workspace }}/workflow-repo/graphs/aws/full
          
          # Export the config path for Terragrunt to use
          export TENANT_CONFIG_PATH="${{ github.workspace }}/config-repo/${{ inputs.config_path }}/${{ inputs.environment }}.yaml"
          
          echo "📦 Initializing Terragrunt for ${LAYER} layer"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Terragrunt Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Account**: \`${{ steps.extract_config.outputs.account_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Layer**: \`${{ inputs.layer }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: \`${{ inputs.action }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Modules Repo**: \`${{ inputs.terraform_repo }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Modules Ref**: \`${{ inputs.terraform_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Update the Terraform module references to use the specified ref
          find . -name "terragrunt.hcl" -type f -exec sed -i "s/?ref=v[0-9.]\+/?ref=${{ inputs.terraform_ref }}/g" {} +
          
          if [ "$LAYER" == "all" ]; then
            terragrunt run-all init --terragrunt-non-interactive
          else
            terragrunt run-all init --terragrunt-non-interactive --terragrunt-include-dir "${LAYER}/**"
          fi
        env:
          TENANT_CONFIG_PATH: ${{ github.workspace }}/config-repo/${{ inputs.config_path }}/${{ inputs.environment }}.yaml
          TERRAGRUNT_GRAPH_ROOT: ${{ github.workspace }}/workflow-repo/graphs/aws/full
          TWINGATE_API_TOKEN: ${{ secrets.TWINGATE_API_TOKEN }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      
      - name: Terragrunt Plan
        id: plan
        if: inputs.action == 'plan' || inputs.action == 'apply'
        run: |
          cd ${{ github.workspace }}/workflow-repo/graphs/aws/full
          
          echo "📋 Running plan in ${LAYER}..."
          
          if [ "$LAYER" == "all" ]; then
            terragrunt run-all plan --terragrunt-non-interactive
          else
            terragrunt run-all plan --terragrunt-non-interactive --terragrunt-include-dir "${LAYER}/**"
          fi
        env:
          TENANT_CONFIG_PATH: ${{ github.workspace }}/config-repo/${{ inputs.config_path }}/${{ inputs.environment }}.yaml
          TERRAGRUNT_GRAPH_ROOT: ${{ github.workspace }}/workflow-repo/graphs/aws/full
          TWINGATE_API_TOKEN: ${{ secrets.TWINGATE_API_TOKEN }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      
      - name: Terragrunt Apply
        if: inputs.action == 'apply'
        run: |
          cd ${{ github.workspace }}/workflow-repo/graphs/aws/full
          
          echo "✅ Applying changes in ${LAYER}..."
          
          if [ "$LAYER" == "all" ]; then
            terragrunt run-all apply --terragrunt-non-interactive
          else
            terragrunt run-all apply --terragrunt-non-interactive --terragrunt-include-dir "${LAYER}/**"
          fi
        env:
          TENANT_CONFIG_PATH: ${{ github.workspace }}/config-repo/${{ inputs.config_path }}/${{ inputs.environment }}.yaml
          TERRAGRUNT_GRAPH_ROOT: ${{ github.workspace }}/workflow-repo/graphs/aws/full
          TWINGATE_API_TOKEN: ${{ secrets.TWINGATE_API_TOKEN }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      
      - name: Terragrunt Destroy
        if: inputs.action == 'destroy'
        run: |
          cd ${{ github.workspace }}/workflow-repo/graphs/aws/full
          
          echo "⚠️ WARNING: Destroying infrastructure!"
          echo "Environment: ${{ inputs.environment }}"
          echo "Layer: $LAYER"
          
          if [ "$LAYER" == "all" ]; then
            terragrunt run-all destroy --terragrunt-non-interactive
          else
            terragrunt run-all destroy --terragrunt-non-interactive --terragrunt-include-dir "${LAYER}/**"
          fi
        env:
          TENANT_CONFIG_PATH: ${{ github.workspace }}/config-repo/${{ inputs.config_path }}/${{ inputs.environment }}.yaml
          TERRAGRUNT_GRAPH_ROOT: ${{ github.workspace }}/workflow-repo/graphs/aws/full
          TWINGATE_API_TOKEN: ${{ secrets.TWINGATE_API_TOKEN }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      
      - name: Deployment Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Duration**: ${{ steps.plan.conclusion != 'skipped' && steps.plan.outputs.duration || 'N/A' }}" >> $GITHUB_STEP_SUMMARY

