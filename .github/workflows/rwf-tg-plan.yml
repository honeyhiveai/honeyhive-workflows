name: 'Reusable Workflow - Terragrunt Plan'

on:
  workflow_call:
    inputs:
      stack_path:
        description: 'Path to the stack in the caller repo (e.g., apiary/acme/usw2)'
        required: true
        type: string
      overlay_ref:
        description: 'Tag/SHA of this repo to checkout for overlay (optional)'
        required: false
        type: string
        default: 'main'
      tg_args:
        description: 'Additional Terragrunt arguments (optional)'
        required: false
        type: string
        default: ''
    secrets:
      GH_APP_ID:
        description: 'GitHub App ID for authentication'
        required: true
      GH_APP_PRIVATE_KEY:
        description: 'GitHub App private key'
        required: true
      AWS_OIDC_ROLE:
        description: 'AWS OIDC role ARN for authentication'
        required: false

permissions:
  contents: read
  id-token: write
  pull-requests: write

concurrency:
  group: tg-${{ inputs.stack_path }}
  cancel-in-progress: false

jobs:
  plan:
    name: 'Terragrunt Plan'
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the caller repository
      - name: Checkout caller repository
        uses: actions/checkout@v4
        with:
          path: stack
      
      # Step 2: Generate GitHub App token
      - name: Generate GitHub App token
        id: app_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          owner: honeyhiveai
          repositories: 'honeyhive-terraform,tf-module-aws-iam,tf-module-aws-vpc,tf-module-aws-secrets-manager,tf-module-helm-argocd,tf-module-helm-karpenter,tf-module-helm-eso'
      
      # Step 3: Checkout catalog repository for overlays
      - name: Checkout catalog repository
        uses: actions/checkout@v4
        with:
          repository: honeyhiveai/honeyhive-workflows
          ref: ${{ inputs.overlay_ref }}
          path: _catalog
      
      # Step 4: Setup Terraform and Terragrunt
      - name: Setup Terragrunt
        uses: ./_catalog/actions/setup-terragrunt
        with:
          token: ${{ steps.app_token.outputs.token }}
      
      # Step 5: Configure git authentication
      - name: Configure git authentication
        uses: ./_catalog/actions/git-auth-github-app
        with:
          token: ${{ steps.app_token.outputs.token }}
      
      # Step 6: Configure AWS credentials
      - name: Configure AWS credentials
        if: secrets.AWS_OIDC_ROLE != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: us-west-2
          role-duration-seconds: 3600
      
      # Step 7: Initialize summary
      - name: Initialize plan summary
        run: |
          echo "## 📋 Terragrunt Plan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Stack:** \`${{ inputs.stack_path }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
      # Step 8: Format check
      - name: Format check
        id: fmt
        uses: gruntwork-io/terragrunt-action@v3
        with:
          tg_version: '0.66.9'
          tg_dir: stack/${{ inputs.stack_path }}
          tg_command: 'hclfmt --check --diff'
          tg_add_approve: '0'
        continue-on-error: true
      
      - name: Format results
        if: always()
        run: |
          echo "### 📝 Format Check" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.fmt.outcome }}" == "success" ]]; then
            echo "✅ All files properly formatted" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Format issues found - run \`terragrunt hclfmt\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
      
      # Step 9: Validate configuration
      - name: Validate configuration
        id: validate
        uses: gruntwork-io/terragrunt-action@v3
        with:
          tg_version: '0.66.9'
          tg_dir: stack/${{ inputs.stack_path }}
          tg_command: 'validate'
          tg_add_approve: '0'
        continue-on-error: true
      
      - name: Validation results
        if: always()
        run: |
          echo "### ✅ Validation" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.validate.outcome }}" == "success" ]]; then
            echo "✅ Configuration is valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Validation failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
      
      # Step 10: Security scan
      - name: Security scan with Checkov
        id: security
        working-directory: stack/${{ inputs.stack_path }}
        run: |
          pip install checkov --quiet
          
          if checkov -d . --framework terraform --quiet --compact 2>&1 | tee security.log; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=warning" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      - name: Security scan results
        if: always()
        run: |
          echo "### 🔒 Security Scan" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.security.outputs.status }}" == "success" ]]; then
            echo "✅ No security issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security scan found issues (see logs for details)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
      
      # Step 11: Fail if validation failed
      - name: Check validation results
        if: steps.validate.outcome == 'failure'
        run: |
          echo "::error::Validation failed. Please fix the issues above."
          exit 1
      
      # Step 12: Terragrunt init
      - name: Terragrunt init
        uses: gruntwork-io/terragrunt-action@v3
        with:
          tg_version: '0.66.9'
          tg_dir: stack/${{ inputs.stack_path }}
          tg_command: 'run-all init --upgrade'
          tg_add_approve: '0'
      
      # Step 13: Terragrunt plan
      - name: Terragrunt plan
        id: plan
        uses: gruntwork-io/terragrunt-action@v3
        with:
          tg_version: '0.66.9'
          tg_dir: stack/${{ inputs.stack_path }}
          tg_command: 'run-all plan ${{ inputs.tg_args }}'
          tg_add_approve: '0'
          tg_comment: '1'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 14: Plan summary
      - name: Plan summary
        if: always()
        run: |
          echo "### 📊 Plan Results" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.plan.outcome }}" == "success" ]]; then
            echo "✅ Plan completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Plan failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View full plan output](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
