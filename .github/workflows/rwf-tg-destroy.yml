name: 'Reusable Workflow - Terragrunt Destroy'
on:
  workflow_call:
    inputs:
      stack_path:
        description: 'Path to the stack in the caller repo (e.g., apiary/acme/usw2)'
        required: true
        type: string
      overlay_ref:
        description: 'Tag/SHA of this repo to checkout for overlay (optional)'
        required: false
        type: string
        default: 'main'
      tg_args:
        description: 'Additional Terragrunt arguments (optional)'
        required: false
        type: string
        default: ''
      confirm_destroy:
        description: 'Type "DESTROY" to confirm destruction'
        required: true
        type: string
    secrets:
      GH_APP_ID:
        description: 'GitHub App ID for authentication'
        required: false
      GH_APP_PRIVATE_KEY:
        description: 'GitHub App private key'
        required: false
      GH_APP_INSTALLATION_TOKEN_SALT:
        description: 'Salt for GitHub App installation token'
        required: false
      GH_APP_TOKEN:
        description: 'Pre-minted GitHub App token (alternative to App ID/Key)'
        required: false
      AWS_OIDC_ROLE:
        description: 'AWS OIDC role ARN for authentication'
        required: false

permissions:
  contents: read
  id-token: write
  pull-requests: write

concurrency:
  group: tg-${{ inputs.stack_path }}
  cancel-in-progress: false

jobs:
  destroy:
    name: 'Terragrunt Destroy'
    runs-on: ubuntu-latest
    environment: production  # Requires approval
    
    steps:
      # Step 1: Confirm destruction
      - name: Confirm destruction
        run: |
          if [[ "${{ inputs.confirm_destroy }}" != "DESTROY" ]]; then
            echo "::error::Destruction not confirmed. Please type 'DESTROY' to confirm."
            exit 1
          fi
          echo "‚ö†Ô∏è Destruction confirmed for stack: ${{ inputs.stack_path }}"
      
      # Step 2: Checkout the caller repository
      - name: Checkout caller repository
        uses: actions/checkout@v4
        with:
          path: stack
      
      # Step 3: Mint or receive GitHub App token
      - name: Generate GitHub App token
        id: github_token
        run: |
          if [[ -n "${{ secrets.GH_APP_TOKEN }}" ]]; then
            echo "Using provided GitHub App token"
            echo "token=${{ secrets.GH_APP_TOKEN }}" >> $GITHUB_OUTPUT
          elif [[ -n "${{ secrets.GH_APP_ID }}" ]] && [[ -n "${{ secrets.GH_APP_PRIVATE_KEY }}" ]]; then
            echo "Generating GitHub App token"
            # TODO: Implement token generation logic here
            echo "::error::GitHub App token generation not yet implemented"
            exit 1
          else
            echo "::warning::No GitHub authentication provided"
            echo "token=" >> $GITHUB_OUTPUT
          fi
      
      # Step 4: Configure git authentication
      - name: Configure git authentication
        if: steps.github_token.outputs.token != ''
        uses: ./stack/.github/actions/git-auth-github-app
        with:
          token: ${{ steps.github_token.outputs.token }}
      
      # Step 5: Checkout this catalog repo for overlays
      - name: Checkout catalog repository
        if: inputs.overlay_ref != ''
        uses: actions/checkout@v4
        with:
          repository: honeyhiveai/honeyhive-workflows
          ref: ${{ inputs.overlay_ref }}
          path: _catalog
      
      # Step 6: Setup Terraform and Terragrunt
      - name: Setup Terragrunt
        uses: ./_catalog/actions/setup-terragrunt
        if: inputs.overlay_ref != ''
      
      - name: Setup Terragrunt (fallback)
        if: inputs.overlay_ref == ''
        uses: honeyhiveai/honeyhive-workflows/actions/setup-terragrunt@main
      
      # Step 7: Configure AWS credentials
      - name: Configure AWS credentials
        if: secrets.AWS_OIDC_ROLE != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: us-west-2
          role-duration-seconds: 3600
      
      # Step 8: Backup current state
      - name: Backup current state
        working-directory: stack/${{ inputs.stack_path }}
        run: |
          echo "## üíæ Backing Up State" >> $GITHUB_STEP_SUMMARY
          
          # Initialize first
          terragrunt run-all init ${{ inputs.tg_args }}
          
          # Pull and backup current state
          if terragrunt state pull > state-backup.json 2>/dev/null; then
            echo "‚úÖ State backed up successfully" >> $GITHUB_STEP_SUMMARY
            echo "Resources to be destroyed:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            terragrunt state list 2>/dev/null | head -20 >> $GITHUB_STEP_SUMMARY || echo "No resources found"
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è No existing state found or unable to backup" >> $GITHUB_STEP_SUMMARY
          fi
      
      # Step 9: Plan destruction
      - name: Plan destruction
        id: plan_destroy
        working-directory: stack/${{ inputs.stack_path }}
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Destruction Plan" >> $GITHUB_STEP_SUMMARY
          
          set +e
          terragrunt run-all plan -destroy ${{ inputs.tg_args }} 2>&1 | tee destroy-plan.log
          PLAN_EXIT_CODE=$?
          set -e
          
          if [[ $PLAN_EXIT_CODE -eq 0 ]]; then
            echo "‚úÖ Destruction plan generated" >> $GITHUB_STEP_SUMMARY
            
            # Show summary of resources to be destroyed
            if grep -q "Plan:" destroy-plan.log; then
              echo '```' >> $GITHUB_STEP_SUMMARY
              grep "Plan:" destroy-plan.log | tail -1 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå Failed to generate destruction plan" >> $GITHUB_STEP_SUMMARY
            exit $PLAN_EXIT_CODE
          fi
      
      # Step 10: Execute destroy
      - name: Terragrunt destroy
        id: destroy
        working-directory: stack/${{ inputs.stack_path }}
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üî• Executing Destruction" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Stack:** \`${{ inputs.stack_path }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Destroyed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Execute destruction
          set +e
          terragrunt run-all destroy -auto-approve ${{ inputs.tg_args }} 2>&1 | tee destroy.log
          DESTROY_EXIT_CODE=$?
          set -e
          
          # Process results
          if [[ $DESTROY_EXIT_CODE -eq 0 ]]; then
            echo "### ‚úÖ Destruction Successful" >> $GITHUB_STEP_SUMMARY
            
            if grep -q "Destroy complete!" destroy.log; then
              echo '```' >> $GITHUB_STEP_SUMMARY
              grep "Destroy complete!" destroy.log | tail -1 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ‚ùå Destruction Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **CRITICAL:** Partial destruction may have occurred!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Error details:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -100 destroy.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit $DESTROY_EXIT_CODE
          fi
      
      # Step 11: Verify destruction
      - name: Verify destruction
        if: success()
        working-directory: stack/${{ inputs.stack_path }}
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Post-Destruction Verification" >> $GITHUB_STEP_SUMMARY
          
          # Check if any resources remain
          if terragrunt state list 2>/dev/null | grep -q .; then
            REMAINING=$(terragrunt state list | wc -l)
            echo "‚ö†Ô∏è Warning: $REMAINING resources still exist in state" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            terragrunt state list >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ All resources successfully destroyed" >> $GITHUB_STEP_SUMMARY
          fi
      
      # Step 12: Upload artifacts
      - name: Upload destruction artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terragrunt-destroy-${{ inputs.stack_path }}-${{ github.run_id }}
          path: |
            stack/${{ inputs.stack_path }}/state-backup.json
            stack/${{ inputs.stack_path }}/destroy-plan.log
            stack/${{ inputs.stack_path }}/destroy.log
          retention-days: 90  # Keep destruction records longer
      
      # Step 13: Update PR/Issue (if applicable)
      - name: Update PR comment
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ steps.destroy.outcome }}' === 'success' ? '‚úÖ Success' : '‚ùå Failed';
            const output = `### üî• Terragrunt Destroy Results
            
            **Stack:** \`${{ inputs.stack_path }}\`
            **Status:** ${status}
            **Workflow:** ${{ github.run_id }}
            **Destroyed by:** @${{ github.actor }}
            **Timestamp:** ${new Date().toISOString()}
            
            ‚ö†Ô∏è **WARNING:** Infrastructure has been destroyed!
            
            [View full results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
