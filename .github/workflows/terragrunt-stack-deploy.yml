name: 'Terragrunt Stack Deploy'

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (e.g., test-usw2-app03)'
        required: true
        type: string
      stack:
        description: 'Stack to deploy (substrate, hosting, application, or full)'
        required: true
        type: string
      action:
        description: 'Terragrunt action (plan, apply, destroy)'
        required: true
        type: string
      config_repo:
        description: 'Configuration repository'
        required: false
        type: string
        default: 'honeyhiveai/apiary'
      config_ref:
        description: 'Configuration repository reference'
        required: false
        type: string
        default: 'main'
      config_path:
        description: 'Path to configs in the repository'
        required: false
        type: string
        default: 'configs'
      config_file:
        description: 'Full path to config file relative to config repo (e.g., configs/test-usw2-app03.yaml)'
        required: false
        type: string
        default: ''
      terraform_repo:
        description: 'Terraform modules repository'
        required: false
        type: string
        default: 'honeyhiveai/honeyhive-terraform'
      terraform_ref:
        description: 'Terraform modules reference'
        required: false
        type: string
        default: 'v0.2.7'
      auto_approve:
        description: 'Auto-approve applies and destroys'
        required: false
        type: boolean
        default: false
      github_app_id:
        description: 'GitHub App ID for authentication'
        required: false
        type: string
        default: ''
      aws_oidc_role:
        description: 'AWS IAM role ARN for OIDC (HoneyhiveFederatedProvisioner)'
        required: false
        type: string
        default: ''
      include_external:
        description: "Include external dependencies (substrate↔hosting, etc)."
        required: false
        default: true
        type: boolean
      queue_max_parallelism:
        description: "Cap parallelism across the DAG (1 = fully serial)."
        required: false
        default: 4
        type: number
      target_unit:
        description: 'Target specific unit (e.g., karpenter, addons, cluster) - leave empty for all units'
        required: false
        type: string
        default: ''
    
    secrets:
      GITHUB_APP_ID:
        required: false
      GITHUB_APP_PEM:
        required: true
      TWINGATE_API_TOKEN:
        required: false
      SLACK_TOKEN:
        required: false
      HONEYHIVE_ARGOCD_DEPLOY_KEY:
        required: false

jobs:
  deploy:
    name: 'Deploy ${{ inputs.stack }} Stack'
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write  # For AWS OIDC authentication
      contents: read   # For repository access
      pull-requests: write  # For PR comments

    env:
      TERRAGRUNT_NON_INTERACTIVE: "true"
      TERRAGRUNT_INCLUDE_DEPENDENCY_OUTPUTS: "true"
      TERRAGRUNT_LOG_LEVEL: info
      CONFIG_PATH: ${{ github.workspace }}/config-repo/${{ inputs.config_file != '' && inputs.config_file || format('{0}/{1}.yaml', inputs.config_path, inputs.environment) }}
      TWINGATE_API_TOKEN: ${{ secrets.TWINGATE_API_TOKEN }}
      SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      HONEYHIVE_ARGOCD_DEPLOY_KEY: ${{ secrets.HONEYHIVE_ARGOCD_DEPLOY_KEY }}

    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ inputs.github_app_id || secrets.GITHUB_APP_ID }}
          private_key: ${{ secrets.GITHUB_APP_PEM }}
      
      - name: Checkout honeyhive-workflows
        uses: actions/checkout@v4
        with:
          repository: honeyhiveai/honeyhive-workflows
          token: ${{ steps.app-token.outputs.token }}
          path: workflow-repo
      
      - name: Checkout configuration repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.config_repo }}
          ref: ${{ inputs.config_ref }}
          token: ${{ steps.app-token.outputs.token }}
          path: config-repo
      
      - name: Setup Python Tools
        uses: ./workflow-repo/actions/setup-python-tools
        with:
          python_version: '3.11'
          requirements_file: workflow-repo/scripts/requirements.txt
          cache_dependencies: 'true'
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_oidc_role || vars.AWS_OIDC_ROLE }}
          role-session-name: terragrunt-stack-${{ github.run_id }}
          aws-region: us-west-2
      
      - name: Setup Terragrunt
        uses: ./workflow-repo/actions/setup-terragrunt
        with:
          terraform_version: '1.9.8'
          terragrunt_version: '0.91.1'

      - name: Setup Git credentials for Terraform
        run: |
          git config --global credential.helper store
          echo "https://x-access-token:${{ steps.app-token.outputs.token }}@github.com" > ~/.git-credentials
          echo "✅ Git credentials configured for Terraform/Terragrunt module access"
      
      - name: Print tenant config
        run: |
          echo "CONFIG_PATH=$CONFIG_PATH"
          test -f "$CONFIG_PATH" || (echo "Tenant config not found" && exit 1)
          echo '---'; sed -n '1,120p' "$CONFIG_PATH" || true
          
          
      - name: Select working directory
        id: select-dir
        run: |
          case "${{ inputs.stack }}" in
          substrate|hosting|application|full)
          echo "dir=${{ github.workspace }}/workflow-repo/stacks/aws/${{ inputs.stack }}" >> "$GITHUB_OUTPUT" ;;
          *)
          echo "Unsupported stack: ${{ inputs.stack }}" >&2; exit 64 ;;
          esac


      - name: Validate stack graph
        continue-on-error: false
        working-directory: ${{ steps.select-dir.outputs.dir }}
        run: |
          # Skip DAG generation for stack - will generate during plan
          echo "Skipping dag graph for stack (will be generated during plan)"
          echo "✅ Stack structure validated"



      - name: Terragrunt ${{ inputs.action }}
        working-directory: ${{ steps.select-dir.outputs.dir }}
        env:
          # Terragrunt will render units into .terragrunt-stack/; abspath in your include guards handle that.
          TG_PARALLELISM: ${{ inputs.queue_max_parallelism }}
        run: |
          if [ -n "${{ inputs.target_unit }}" ]; then
            echo "🎯 Targeting specific unit: ${{ inputs.target_unit }}"
            cd "../../../units/${{ inputs.stack }}/${{ inputs.target_unit }}"
            case "${{ inputs.action }}" in
              validate)
                terragrunt validate
                ;;
              plan)
                terragrunt plan -lock-timeout=10m -input=false
                ;;
              apply)
                terragrunt apply -auto-approve -lock-timeout=10m -input=false
                ;;
              destroy)
                terragrunt destroy -auto-approve -lock-timeout=10m -input=false
                ;;
              *) echo "Unsupported action: ${{ inputs.action }}" >&2; exit 64 ;;
            esac
          else
            echo "🌐 Running on entire ${{ inputs.stack }} stack"
            case "${{ inputs.action }}" in
              validate)
                terragrunt stack run validate
                ;;
              plan)
                terragrunt stack run plan -- -lock-timeout=10m -input=false
                ;;
              apply)
                terragrunt stack run apply -- -auto-approve -lock-timeout=10m -input=false
                ;;
              destroy)
                terragrunt stack run destroy -- -auto-approve -lock-timeout=10m -input=false
                ;;
              *) echo "Unsupported action: ${{ inputs.action }}" >&2; exit 64 ;;
            esac
          fi
          
          
      - name: Upload DAG (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terragrunt-dag-${{ inputs.stack }}-${{ github.run_id }}
          path: ${{ steps.select-dir.outputs.dir }}/terragrunt-dependency-graph.dot
          if-no-files-found: ignore
          
          
      - name: Post summary
        if: always()
        run: |
          {
            echo "### Terragrunt Stack Deploy";
            echo "- **Stack**: ${{ inputs.stack }}";
            echo "- **Action**: ${{ inputs.action }}";
            echo "- **Tenant config**: ${{ inputs.environment }}";
            echo "- **Include external deps**: ${{ inputs.include_external }}";
            echo "- **Max parallelism**: ${{ inputs.queue_max_parallelism }}";
            echo "- **Status**: ${{ job.status }}";
          } >> $GITHUB_STEP_SUMMARY
